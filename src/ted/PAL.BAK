#include <dos.h>
#include <stdio.h>
/*#include <process.h>
#include <io.h>
#include <dos.h>
#include <alloc.h>
#include <dir.h>
#include <mem.h>
#include <string.h>
#include <stdlib.h>
#include <conio.h>
#include <fcntl.h>*/

unsigned char far pal[768] = {
	0x0, 0x0, 0x0,
	0x0, 0x0, 0xaa,
	0x0, 0xaa, 0x0,
	0x0, 0xaa, 0xaa,
	0xaa, 0x0, 0x0,
	0xaa, 0x0, 0xaa,
	0xaa, 0x55, 0x0,
	0xaa, 0xaa, 0xaa,
	0x55, 0x55, 0x55,
	0x55, 0x55, 0xff,
	0x55, 0xff, 0x55,
	0x55, 0xff, 0xff,
	0xff, 0x55, 0x55,
	0xff, 0x55, 0xff,
	0xff, 0xff, 0x55,
	0xff, 0xff, 0xff,
	//deluxe paint default colors
	0xef, 0xef, 0xef, 0xdf, 0xdf, 0xdf, 0xd3, 0xd3, 0xd3, 0xc3, 0xc3, 0xc3, 0xb7, 0xb7, 0xb7, 0xab, 0xab, 0xab,
	0x9b, 0x9b, 0x9b, 0x8f, 0x8f, 0x8f, 0x7f, 0x7f, 0x7f, 0x73, 0x73, 0x73, 0x67, 0x67, 0x67, 0x57, 0x57, 0x57, 0x4b, 0x4b, 0x4b, 0x3b, 0x3b, 0x3b, 0x2f, 0x2f, 0x2f, 0x23, 0x23, 0x23, 0xff, 0x0,
	0x0, 0xef, 0x0, 0x0, 0xe3, 0x0, 0x0, 0xd7, 0x0, 0x0, 0xcb, 0x0, 0x0, 0xbf, 0x0, 0x0, 0xb3, 0x0, 0x0, 0xa7, 0x0, 0x0, 0x9b, 0x0, 0x0, 0x8b, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x73, 0x0, 0x0, 0x67, 0x0,
	0x0, 0x5b, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x40, 0x0, 0x0, 0xff, 0xda, 0xda, 0xff, 0xba, 0xba, 0xff, 0x9f, 0x9f, 0xff, 0x7f, 0x7f, 0xff, 0x5f, 0x5f, 0xff, 0x40, 0x40, 0xff, 0x20, 0x20, 0xff, 0x0,
	0x0, 0xfc, 0xa8, 0x5c, 0xfc, 0x98, 0x40, 0xfc, 0x88, 0x20, 0xfc, 0x78, 0x0, 0xe4, 0x6c, 0x0, 0xcc, 0x60, 0x0, 0xb4, 0x54, 0x0, 0x9c, 0x4c, 0x0, 0xfc, 0xfc, 0xd8, 0xfc, 0xfc, 0xb8, 0xfc, 0xfc,
	0x9c, 0xfc, 0xfc, 0x7c, 0xfc, 0xf8, 0x5c, 0xfc, 0xf4, 0x40, 0xfc, 0xf4, 0x20, 0xfc, 0xf4, 0x0, 0xe4, 0xd8, 0x0, 0xcc, 0xc4, 0x0, 0xb4, 0xac, 0x0, 0x9c, 0x9c, 0x0, 0x84, 0x84, 0x0, 0x70, 0x6c,
	0x0, 0x58, 0x54, 0x0, 0x40, 0x40, 0x0, 0xd0, 0xfc, 0x5c, 0xc4, 0xfc, 0x40, 0xb4, 0xfc, 0x20, 0xa0, 0xfc, 0x0, 0x90, 0xe4, 0x0, 0x80, 0xcc, 0x0, 0x74, 0xb4, 0x0, 0x60, 0x9c, 0x0, 0xd8, 0xfc,
	0xd8, 0xbc, 0xfc, 0xb8, 0x9c, 0xfc, 0x9c, 0x80, 0xfc, 0x7c, 0x60, 0xfc, 0x5c, 0x40, 0xfc, 0x40, 0x20, 0xfc, 0x20, 0x0, 0xfc, 0x0, 0x0, 0xff, 0x0, 0x0, 0xef, 0x0, 0x0, 0xe3, 0x0, 0x0, 0xd7,
	0x0, 0x7, 0xcb, 0x0, 0x7, 0xbf, 0x0, 0x7, 0xb3, 0x0, 0x7, 0xa7, 0x0, 0x7, 0x9b, 0x0, 0x7, 0x8b, 0x0, 0x7, 0x7f, 0x0, 0x7, 0x73, 0x0, 0x7, 0x67, 0x0, 0x7, 0x5b, 0x0, 0x7, 0x4f, 0x0, 0x4, 0x40,
	0x0, 0xda, 0xff, 0xff, 0xb8, 0xfc, 0xfc, 0x9c, 0xfc, 0xfc, 0x7c, 0xfc, 0xf8, 0x5c, 0xfc, 0xfc, 0x40, 0xfc, 0xfc, 0x20, 0xfc, 0xfc, 0x0, 0xfc, 0xfc, 0x0, 0xe4, 0xe4, 0x0, 0xcc, 0xcc, 0x0, 0xb4,
	0xb4, 0x0, 0x9c, 0x9c, 0x0, 0x84, 0x84, 0x0, 0x70, 0x70, 0x0, 0x58, 0x58, 0x0, 0x40, 0x40, 0x5c, 0xbc, 0xfc, 0x40, 0xb0, 0xfc, 0x20, 0xa8, 0xfc, 0x0, 0x9c, 0xfc, 0x0, 0x8c, 0xe4, 0x0, 0x7c,
	0xcc, 0x0, 0x6c, 0xb4, 0x0, 0x5c, 0x9c, 0xda, 0xda, 0xff, 0xba, 0xbf, 0xff, 0x9f, 0x9f, 0xff, 0x7f, 0x80, 0xff, 0x5f, 0x60, 0xff, 0x40, 0x40, 0xff, 0x20, 0x25, 0xff, 0x0, 0x5, 0xff, 0x0, 0x0,
	0xff, 0x0, 0x0, 0xef, 0x0, 0x0, 0xe3, 0x0, 0x0, 0xd7, 0x0, 0x0, 0xcb, 0x0, 0x0, 0xbf, 0x0, 0x0, 0xb3, 0x0, 0x0, 0xa7, 0x0, 0x0, 0x9b, 0x0, 0x0, 0x8b, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x73, 0x0, 0x0,
	0x67, 0x0, 0x0, 0x5b, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x40, 0xf0, 0xda, 0xff, 0xe5, 0xba, 0xff, 0xda, 0x9f, 0xff, 0xd0, 0x7f, 0xff, 0xca, 0x5f, 0xff, 0xbf, 0x40, 0xff, 0xb5, 0x20, 0xff, 0xaa, 0x0,
	0xff, 0x9a, 0x0, 0xe5, 0x80, 0x0, 0xcf, 0x75, 0x0, 0xb5, 0x60, 0x0, 0x9f, 0x50, 0x0, 0x85, 0x45, 0x0, 0x70, 0x35, 0x0, 0x5a, 0x2a, 0x0, 0x40, 0xff, 0xda, 0xff, 0xff, 0xba, 0xff, 0xff, 0x9f,
	0xff, 0xff, 0x7f, 0xff, 0xff, 0x5f, 0xff, 0xff, 0x40, 0xff, 0xff, 0x20, 0xff, 0xff, 0x0, 0xff, 0xe0, 0x0, 0xe5, 0xca, 0x0, 0xcf, 0xb5, 0x0, 0xb5, 0x9f, 0x0, 0x9f, 0x85, 0x0, 0x85, 0x6f, 0x0,
	0x70, 0x5a, 0x0, 0x5a, 0x40, 0x0, 0x40, 0xff, 0xea, 0xdf, 0xff, 0xe0, 0xd0, 0xff, 0xda, 0xc5, 0xff, 0xd5, 0xbf, 0xff, 0xcf, 0xb0, 0xff, 0xc5, 0xa5, 0xff, 0xbf, 0x9f, 0xff, 0xba, 0x90, 0xff,
	0xb0, 0x80, 0xff, 0xa5, 0x70, 0xff, 0x9f, 0x60, 0xf0, 0x95, 0x5f, 0xea, 0x8f, 0x5a, 0xdf, 0x8a, 0x55, 0xd0, 0x80, 0x50, 0xca, 0x7f,
	0x4f, 0xbf, 0x7a, 0x4a, 0xb5, 0x70, 0x45, 0xaa, 0x6a, 0x40, 0xa0, 0x65, 0x3f, 0x9f, 0x60, 0x3a, 0x90, 0x5f, 0x35, 0x8a, 0x5a, 0x30, 0x80, 0x50, 0x2f, 0x75, 0x4f, 0x2a, 0x6f, 0x4a, 0x25, 0x5f, 0x40, 0x20, 0x55, 0x3f, 0x1f, 0x4a, 0x3a, 0x1a, 0x40, 0x30, 0x1a, 0x3a, 0x2f, 0x15, 0x2a, 0x20,
	0x0f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x2b, 0x2b, 0xc7, 0x4f, 0x2b, 0xc7, 0x77, 0x2b, 0xc7, 0x9f, 0x2b, 0xc7, 0xc7, 0x2b, 0x9f, 0xc7, 0x2b, 0x77, 0xc7, 0x2b, 0x4f, 0xc7, 0x2b, 0x2b, 0xc7, 0x33, 0x2b, 0xc7, 0x5f, 0x2b, 0xc7, 0x8b, 0x2b, 0xc7, 0xb7, 0x2b, 0xab, 0xc7, 0x2b, 0x7f, 0xc7, 0x2b, 0x53, 0xc7, 0x2f, 0x2b, 0xc7,
	0x5b, 0x2b, 0xc7, 0x87, 0x2b, 0xc7, 0xb3, 0x2b, 0xc7, 0xc7, 0x2b, 0xaf, 0xc7, 0x2b, 0x83, 0xc7, 0x2b, 0x57, 0xc7, 0x2b, 0x2b, 0xff, 0xff, 0xff
};

void VL_Plot (int x, int y, int color)
{
	*(unsigned char far *)MK_FP(0xa0000000,((y*320)+(x>>2))) = color;
}
	
void Item_Pal(void)
{
	int i,j,k;
	i=j=k=0;
	for(;j<16;j++)
	{
		for(i=0;i<16*4;i+=4)
		{
			VL_Plot (i, j, k);
			k++;
		}
		//getch();
	}
}
	
//unsigned vgalookup[200];

/*unsigned char *
modexNewPal() {
	unsigned char *ptr;
	ptr = malloc(PAL_SIZE);
	
	// handle errors
	if(!ptr) {
		printf("Could not allocate palette.\n");
		exit(-1);
	}
	
	return ptr;
}*/

void LoadPalFile(unsigned char *filename, unsigned char far *palette)
{
	FILE *file;
	unsigned char far *ptr;
	
	/* free the palette if it exists */
	/*if(*palette) {
		free(*palette);
	}*/
	
	/* allocate the new palette */
	//*palette = &VGAPAL;
	
	/* open the file */
	file = fopen(filename, "rb");
	if(!file) {
		printf("Could not open palette file: %s\n", filename);
		exit(-2);
	}
	
	/* read the file */
	ptr = palette;
	while(!feof(file)) {
		*ptr++ = fgetc(file);
	}
	
	fclose(file);
}

void main()
{
	union REGS regset;
	struct SREGS sregset;
	int i;
//	char far * pal = &VGAPAL;
	_AX=0x13;
	geninterrupt(0x10);

	LoadPalFile("pal.pal", ()&pal);
#define PAL_SIZE				(256 * 3)
/*	for(i=0; i<PAL_SIZE; i+=3)
	{
		printf("%X	%X	%X\n", VGAPAL[i], VGAPAL[i+1], VGAPAL[i+2]);
		if(!(i%16)){ getch(); printf("====\n");}
	}*/
	/* Now set up the palette */
//	regset.x.ax = 0x1012;   /* set block of DAC registers function */
//	regset.x.bx = 0;        /* first DAC location to load */
//	regset.x.cx = 256;      /* # of DAC locations to load */
//	regset.x.dx = (unsigned short)pal; /* offset of array from which	to load RGB settings */
//	sregset.es = _DS; /* segment of array from which to load settings */
//	int86x(0x10, &regset, &regset, &sregset); /* load the palette block */
/*
	 _BX=0;
	 _CX=0x100;
	 _DX=FP_OFF(&VGAPAL);
	 _ES=FP_SEG(&VGAPAL);
	 _AX=0x1012;
	 geninterrupt(0x10);
*/

#define PAL_READ_REG			0x03C7	// Color register, read address
#define PAL_WRITE_REG			0x03C8	// Color register, write address
#define PAL_DATA_REG			0x03C9	// Color register, data port

outport(PAL_WRITE_REG, 0);	// start at the beginning of palette
for(i=0; i<PAL_SIZE; i++)
{
	outport(PAL_DATA_REG, &pal[i]);
}
getch();
Item_Pal();
getch();
_AX=0x03;
geninterrupt(0x10);
}
